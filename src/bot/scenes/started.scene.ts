import { resolve } from 'node:path'
import { Injectable } from '@nestjs/common';
import { Scene, SceneEnter, Ctx, On, Message, Action, Start, Hears } from 'nestjs-telegraf';
import { format } from 'date-fns';
import { ru } from 'date-fns/locale';

import { Context } from '../context.interface';
import { BotService } from '../bot.service';
import { ShedulerService } from '../sheduler.service';
import { ParserService } from 'src/parser/parser.service';

@Scene('STARTED_SCENE')
@Injectable()
export class StartedScene {
   constructor(
      private readonly botService: BotService,
      private readonly sheduleService: ShedulerService,
      private readonly parserService: ParserService,
   ) {}

   @SceneEnter()
   async onSceneEnter(@Ctx() ctx: Context) {
      const imagePath = resolve('./data/grinch.png');
      await ctx.replyWithPhoto({
          source: imagePath,
      });
      await this.showStartedKeyboard(ctx, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!')
   }

  @Hears('üìÖ –£–∫–∞–∑–∞—Ç—å –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è')
  async setDate(@Ctx() ctx: Context) {
      ctx.session.awaitingInput = 'set_date';
      await ctx.reply('–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ 01-01-2025\n–ü–æ –¥–≤–µ —Ü–∏—Ñ—Ä—ã –¥–µ–Ω—å-–º–µ—Å—è—Ü, –∏ –≥–æ–¥ –ø–æ–ª–Ω–æ—Å—Ç—å—é —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å, –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤. –ú–∞–∫—Å–∏–º—É–º –Ω–∞ 24 –¥–Ω—è –≤–ø–µ—Ä—ë–¥.');
  }

  @Hears('‚è∞ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∞—Ç—É')
  async getDate(@Ctx() ctx: Context) {
      const eventDate = await this.sheduleService.findEventDate()
      const date = new Date(eventDate.get('date'));
      const currentDate = new Date();
      const formatDate = format(date, 'dd MMMM yyyy –≤ HH:mm', { locale: ru });
      await ctx.reply('üìÜ')
      if(date > currentDate) {
         await ctx.reply(`–°–æ–±—ã—Ç–∏–µ ${formatDate} –µ—â—ë –Ω–µ –Ω–∞—Å—Ç—É–ø–∏–ª–æ.\n–Ø –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —Å–ª–µ–∂—É, –∏ –Ω–µ –ø—Ä–æ–ø—É—â—É –µ–≥–æ.`)
      } else {
         await this.showStartedKeyboard(ctx, `–°–æ–±—ã—Ç–∏–µ ${formatDate} —É–∂–µ –ø—Ä–æ—à–ª–æ. \n–ú–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å –Ω–æ–≤—É—é –¥–∞—Ç—É.`)
      }
      console.log(date)
  }

  @Hears('‚öôÔ∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–æ—Ç–∞')
  async checkBot(ctx: Context) {
      this.parserService.processContacts(ctx)
  }

   @Start()
   async start(ctx) {
      delete ctx.session.user
      await ctx.scene.leave()
      await this.botService.startedMessage(ctx)
   }

   @On('text')
   async handleTextInput(@Ctx() ctx: Context, @Message() message) {
      if(ctx.session.awaitingInput === 'set_date') {
         try {
            await this.checkDate(ctx, message.text)
         } catch (error) {
            console.log('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞—Ç—ã')
         }
         return
      }
      if(ctx.session.awaitingInput === 'set_time') {
         try {
            await this.checkTime(ctx, message.text)
         } catch (error) {
            console.log('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏')
         }
         return
      }
   }

   @Action('confirmEventDate')
   async saveEventDate(ctx: Context) {
      try {
         const event = await this.sheduleService.updateEventDate(ctx.session.date.fullStr)
         await this.sheduleService.scheduleEvent(
            event.get('id'), new Date(event.get('date'))
         )
         await ctx.reply('üéÑ')
         await this.showStartedKeyboard(
            ctx, '–ì–æ—Ç–æ–≤–æ! \n–ö–∞–∫ —Ç–æ–ª—å–∫–æ –Ω–∞—Å—Ç—É–ø–∏—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è, —è —Å–¥–µ–ª–∞—é –≤—Å—é —Ä–∞–±–æ—Ç—É'
         )
         await ctx.answerCbQuery('–î–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞')
      } catch (error) {
         console.log(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫—Ç @Action('confirmEventDate updateEventDate')`)
      }
      try {
         await ctx.deleteMessage()
      } catch (error) {
         console.log(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫—Ç @Action('confirmEventDate deleteMessage')`)
      }
   }

   @Action('canselSaveEventDate')
   async canselSaveEventDate(ctx: Context) {
      try {
         await ctx.reply('‚ùå')
         await this.showStartedKeyboard(
            ctx, '–ö–∞–∫ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞'
         )
         await ctx.answerCbQuery('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ')
      } catch (error) {
         console.log(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫—Ç @Action('confirmEventDate showStartedKeyboard')`)
      }
      try {
         await ctx.deleteMessage()
      } catch (error) {
         console.log(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫—Ç @Action('confirmEventDate deleteMessage')`)
      }
   }

   async confirmDate(ctx: Context, { hours, minutes }) {
      const parsedDate = this.parseDate(ctx.session.date.day)
      const datetime = new Date(parsedDate);
      datetime.setHours(hours, minutes);
      const currentDate = new Date()
      const datetimeStr = format(datetime, 'dd MMMM yyyy –≤ HH-mm', { locale: ru });
      // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º
      if(datetime < currentDate) {
         await ctx.reply('‚ùå')
         await this.showStartedKeyboard(
            ctx, `–£–∫–∞–∑–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ ${datetimeStr} —É–∂–µ –ø—Ä–æ—à–ª–∞\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ`
         )
         return
      }
      // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –¥–∞–ª—å—à–µ 24 –¥–Ω–µ–π
      const maxDelay = 2_147_483_647; // ~24.8 –¥–Ω—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
      const delay = datetime.getTime() - currentDate.getTime();
      if (delay > maxDelay) {
         await ctx.reply('‚ùå');
         await this.showStartedKeyboard(
            ctx,
            `–£–∫–∞–∑–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ ${datetimeStr} —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ, —É–∫–∞–∑–∞–≤ –¥–∞—Ç—É –±–ª–∏–∂–µ –∫ —Ç–µ–∫—É—â–µ–π (–Ω–µ –¥–∞–ª–µ–µ 24 –¥–Ω–µ–π)`
         );
         return;
      }
      // –ï—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
      ctx.session.date.fullStr = datetime
      await ctx.reply(`–°–æ–±—ã—Ç–∏–µ –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç ${datetimeStr}, –≤—Å—ë –≤–µ—Ä–Ω–æ?`, {
         reply_markup: {
            inline_keyboard: [
               [
                  { text: 'üëç –î–∞', callback_data: 'confirmEventDate' },
                  { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'canselSaveEventDate' }
               ],
            ],
         },
      });
   }

   async checkDate(ctx, date) {
      const parsedDate = this.parseDate(date)
      if (parsedDate) {
         ctx.session.date.day = date
         await ctx.reply('–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ 12-00\n–ü–æ –¥–≤–µ —Ü–∏—Ñ—Ä—ã —á–∞—Å-–º–∏–Ω—É—Ç—ã –≤ 24-—á–∞—Å–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ');
         ctx.session.awaitingInput = 'set_time';
     } else {
         await ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! \n–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ 01-01-2025\n–ü–æ –¥–≤–µ —Ü–∏—Ñ—Ä—ã –¥–µ–Ω—å-–º–µ—Å—è—Ü, –∏ –≥–æ–¥ –ø–æ–ª–Ω–æ—Å—Ç—å—é —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å, –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤. –ú–∞–∫—Å–∏–º—É–º –Ω–∞ 24 –¥–Ω—è –≤–ø–µ—Ä—ë–¥.');
     }
   }

   async checkTime(ctx: Context, time: string) {
      const parsedTime = this.parseTime(time)
      if (parsedTime) {
         ctx.session.date.time = time
         ctx.session.awaitingInput = ''
         this.confirmDate(ctx, parsedTime)
     } else {
         await ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!!!! \n–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ 12:00\n–ü–æ –¥–≤–µ —Ü–∏—Ñ—Ä—ã —á–∞—Å-–º–∏–Ω—É—Ç—ã –≤ 24-—á–∞—Å–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.');
     }
   }

   private parseDate(text: string): Date | null {
      const [day, month, year] = text.split('-').map(Number);
      if (day && month && year && day <= 31 && month <= 12) {
        const date = new Date(year, month - 1, day);
        if (date.getDate() === day && date.getMonth() === month - 1 && date.getFullYear() === year) {
          return date;
        }
      }
      return null;
   }

    private parseTime(text: string): { hours: number; minutes: number } | null {
      const [hours, minutes] = text.split('-').map(Number);
      if (hours >= 0 && hours <= 23 && minutes >= 0 && minutes <= 59) {
        return { hours, minutes };
      }
      return null;
    }

    async showStartedKeyboard(ctx: Context, title) {
      await ctx.reply(title, {
         reply_markup: {
             keyboard: [
                 [{ text: 'üìÖ –£–∫–∞–∑–∞—Ç—å –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è' }, { text: '‚è∞ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∞—Ç—É' }],
                 [{ text: '‚öôÔ∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–æ—Ç–∞' }],
             ],
             resize_keyboard: true,
         },
     });
    }
}